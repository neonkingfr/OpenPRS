%{
/*                               -*- Mode: C -*- 
 * oprs-server-parser.y -- yacc grammaire
 * 
 * Copyright (c) 1991-2013 Francois Felix Ingrand.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    - Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    - Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include "config.h"

#include <stdio.h>
#ifndef WIN95
#include <sys/file.h>
#endif
/* #define	fileno(p)	((p)->_file) Required by bison.. */

#include "oprs-server-lex.h"

#include "macro.h"
#include "constant.h"
#include "opaque.h"
#include "slistPack.h"
#include "slistPack_f.h"
#include "oprs-type.h"
#include "mp-register.h"
#include "oprs-server.h"
#include "parser-funct.h"

#include "yy-funct_f.h"
#include "oprs-server-main_f.h"
#include "oprs-type_f.h"
#include "oprs-array_f.h"
#include "help_f.h"
#include "oprs-client_f.h"
#include "oprs-send-m_f.h"
#include "send-message_f.h"
#include "parser-funct_f.h"

Oprs_Client *oprs_client = NULL;


%}

%union {
    double    	real;        /* real value */
    int    	integer;    /* integer value */
    long long int    	long_long;    /* integer value */
    void    		*pointer;    /* pointer value */
    char    	*string;    /* string buffer */
    Symbol    	symbol;  
    int    	cmd;        /* command value */
    PBoolean	bool;
    TermList 	list_term;
    PropertyList prop_list;
    Envar       *var;
    Term 	*term;
    Expression 	*expr;
}

%token <real> 		REAL_TK
%token <pointer> 	POINTER_TK
%token <integer>	INTEGER_TK 
%token <long_long>	LONG_LONG_TK 
%token <string> 	QSTRING_TK SYMBOL_TK LOGICAL_VAR_TK PROGRAM_VAR_TK

%token <cmd> 	QUIT HELP RESET_DOT_TK ADD_TK SEND BROADCAST
%token <cmd> 	SHOW VERSION_TK COPYRIGHT MAKE_OPRS MAKE_X_OPRS ACCEPT_OPRS TRANSMIT KILL_OPRS 
%token <cmd> 	CONNECT INCLUDE RESET_TK PARSER_TK KERNEL_TK TRANSMIT_ALL
%token <cmd>	REHASH_TK

%token <cmd> 	OP_LISP_TK CP_LISP_TK OP_ARRAY_TK CP_ARRAY_TK OPENP_TK CLOSEP_TK



%type <string> 		predicate string file_name
%type <list_term> 	term_list
%type <var> 		variable
%type <term> 		term 
%type <expr> 		expr no_left_par_expr

%%

one_oprs_server_command: | server_command  {yy_begin_COMMAND(); YYACCEPT;} ;  /* We have to return explicitly to free the memory and get out of here*/

server_command: INCLUDE file_name {open_file_for_yyparse($2); FREE($2);} 
	| TRANSMIT { yy_begin_0();} SYMBOL_TK string
		{transmit_to_client($3,$4);}
	| TRANSMIT_ALL { yy_begin_0();} string
		{transmit_to_all_client($3);}
	| MAKE_OPRS  { yy_begin_0();} SYMBOL_TK
		{make_oprs_client($3);}
	| MAKE_X_OPRS  { yy_begin_0();} SYMBOL_TK
		{make_x_oprs_client($3);}
	| ACCEPT_OPRS  { yy_begin_0(); 
#ifdef USE_MULTI_THREAD
	  if (use_thread) 
	       printf(LG_STR("oprs-server: auto accept server....\n",
		             "oprs-server: server acceptant automatiquement.\n"));
	  else
#endif
		if ((oprs_client = accept_oprs_client())) info_oprs_client(oprs_client);

			}
	| KILL_OPRS  { yy_begin_0();} SYMBOL_TK
		{kill_named_oprs_client($3);}
| REHASH_TK  { yy_begin_0();} SYMBOL_TK {
#if defined(HAVE_LIBREADLINE)
		rehash_named_oprs_client($3);
#else
		printf(LG_STR("oprs-server: command unavailable...\n",
			       "oprs-server: commande non disponible...\n"));
#endif
		}
	| RESET_TK PARSER_TK  { yy_begin_0();} SYMBOL_TK
		{reset_parser_named_oprs_client($4);}
	| RESET_TK KERNEL_TK  { yy_begin_0();} SYMBOL_TK
		{reset_kernel_named_oprs_client($4);}
	| CONNECT  { yy_begin_0();} SYMBOL_TK
		{pass_the_stdin($3);}
	| SHOW COPYRIGHT
		{print_copyright_notice();}
	| SHOW VERSION_TK
		{print_version();}
	| add_frame  SYMBOL_TK expr
		{add_expr_to_client($3,$2); disable_variable_parsing();}
	| SEND {enable_variable_parsing(); yy_begin_0();} SYMBOL_TK expr
		{send_message_expr($4,$3); disable_variable_parsing();}
	| BROADCAST {enable_variable_parsing(); yy_begin_0();} expr
		{broadcast_message_expr($3); disable_variable_parsing();}
	| add_frame error RESET_DOT_TK
		{warning("Parsing error, expecting a expr after add");}
	| HELP
		{print_server_help_from_parser();} /* Dans le futur on aura un help par commande... */
	| QUIT
		{quit = TRUE;}
	|  error RESET_DOT_TK
		{warning("Parsing error, unknown command, reseting the parser");}
	;


file_name: QSTRING_TK				{$$=canonicalize_file_name($1);}
	;

string:
        QSTRING_TK			        { $$=$1;}
        ;

add_frame: ADD_TK  {enable_variable_parsing(); yy_begin_0();}
	;

expr:
	OPENP_TK no_left_par_expr 			{$$=$2;}
	;

no_left_par_expr:
	predicate term_list CLOSEP_TK 		{$$=build_expr_sym_terms_external($1,$2); }
	;

predicate: 
	SYMBOL_TK				{ $$=$1;}
	;
        
term_list:
	/*nothing*/ 				{$$=(TermList)sl_make_slist();}
	| term_list term 			{$$=build_term_list($1,$2);}
	;

term:
	INTEGER_TK 				{$$=build_integer($1);}
	| LONG_LONG_TK  			{$$=build_long_long($1);}
	| POINTER_TK  				{$$=build_pointer($1);}
	| REAL_TK  				{$$=build_float($1);}
	| QSTRING_TK				{$$=build_qstring($1);}
	| SYMBOL_TK				{$$=build_id($1);}
	| variable  				{$$=build_term_from_var($1);}
	| expr	 				{$$=build_term_expr($1);}
	| OP_LISP_TK term_list CP_LISP_TK 	{$$=build_term_l_list_from_c_list($2);}
	| OP_ARRAY_TK term_list CP_ARRAY_TK 	{$$=build_term_array_from_c_list($2);}
	| error RESET_DOT_TK			{warning("Parsing error, badly formed Term");yy_begin_COMMAND(); YYACCEPT;}
	;

variable:
	LOGICAL_VAR_TK 				{$$=build_var_in_frame($1,LOGICAL_VARIABLE);}
	| PROGRAM_VAR_TK  			{$$=build_var_in_frame($1,PROGRAM_VARIABLE);}
	;

%%
