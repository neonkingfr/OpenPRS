/*
 * Copyright (c) 1991-2013 Francois Felix Ingrand.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    - Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    - Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

pos_x: INTEGER_TK		{$$ = $1;}
	;

pos_y: INTEGER_TK		{$$ = $1;}
	;

visible: boolean	{$$ = $1;}
	;

pp_width: INTEGER_TK	{$$ = $1;}
	;

pp_fill: boolean	{$$ = $1;}
	;

boolean: INTEGER_TK	{$$ = ($1 ? TRUE : FALSE);}
	;

invocation:                     {check_symbol = TRUE;}
            expr		{$$ = $2;
			        check_symbol = FALSE;}
	    ;

call: 				{$$ = NULL;}
        | expr			{$$ = $1;}
	;

context: 			{$$ = NULL;}
        | expr			{$$ = sl_make_slist();sl_add_to_tail($$,$1);}
        | list_par_expr		{$$ = $1;}
	;

setting: 				{$$ = NULL;}
	|                       {check_symbol = TRUE;}
          expr			{$$ = $2;
			         check_symbol = FALSE;}
	;

properties: 			{$$ = NULL;}
	| OPENP_TK                   {check_symbol = TRUE;}
           properties_list CLOSEP_TK  {check_symbol = FALSE; $$ = $3;}
	;

properties_list:			{$$ = sl_make_slist();}
 	| properties_list property	{if ($2) sl_add_to_tail($1,$2); $$=$1;}
	;

documentation:			{$$ = NULL;}
	| QSTRING_TK		{$$ = $1;}
	;



effects:                       {check_symbol = TRUE;}
          list_effects		{$$ = $2;
			         check_symbol = FALSE;}
	;

action:                         {check_symbol = TRUE; yy_begin_ACTION_TYPE();}
            action_expr		{$$ = $2; check_symbol = FALSE;}
	;

action_expr:
	OPENP_TK SPEC_ACT_TK {yy_begin_0();} variable
		simple_action CLOSEP_TK		{$$ = build_action_field($5, TRUE, FALSE, NULL, $4);}
        | OPENP_TK SPEC_ACT_TK {yy_begin_0();} OPENP_TK var_list CLOSEP_TK
		simple_action CLOSEP_TK		{$$ = build_action_field($7, TRUE, TRUE, $5, NULL);}
	| simple_action				{$$ = build_action_field($1, FALSE, FALSE, NULL, NULL);}
;

simple_action:
	OPENP_TK  {yy_begin_0();} pred_func 				
		term_list CLOSEP_TK		 	 {$$=build_simple_action_cached($3,$4);}
;

nlist_edges: 
	/* empty */
	| nlist_edges nedge  			
	;

nedge: 	
	OPENP_TK {yy_begin_EDGE_TYPE();} nedge_typed CLOSEP_TK
	| error RESET_DOT_TK 			{warning(LG_STR("Parsing error, badly formed edge",
								"Erreur de parsing, arc mal formé"));}
	;



edge_expr:                    {check_symbol = TRUE;}
         expr 		{$$ = $2;
			         check_symbol = FALSE;}
	;

edge_knots:
	OPENP_TK list_knots CLOSEP_TK			{$$ = $2;}
	;

list_knots: /* empty */ 			{$$ = sl_make_slist();}
	| list_knots OPENP_TK INTEGER_TK INTEGER_TK CLOSEP_TK	{sl_add_to_tail($1,(void *)$3); sl_add_to_tail($1,(void *)$4); $$ = $1;}
	;

op_name:
	SYMBOL_TK				{$$=$1;}
	;

edge_name: 
	SYMBOL_TK				{$$=$1;}
	;

node_name: 
	SYMBOL_TK				{$$=$1;}
	;
