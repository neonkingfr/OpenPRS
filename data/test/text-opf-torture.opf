;;;
;;; File: text-opf-torture.opf
;;; $Id$
;;; Date: Wed Feb 15 18:06:35 1995
;;; Host: cascade
;;; OP Editor Version : 1.3.1 Beta
;;; Compiled on cascade (Wed Nov 16 12:06:21 MET 1994)
;;; OP File Format: 2
;;;
(
(defop PRINT
:invocation (! (PRINT $N)) 
:action (PRINT $N)
:documentation "This OP prints its term."
)
(defop TEST1
:invocation (! (TEST1)) 
:body
((! (PRINT "test 1 \nstart"))
 (// ((! (PRINT "test \n1\n1"))
     )
     ((! (PRINT "test 1 2"))
     )
 )
 (! (PRINT "test 1 end"))
)
)
(defop TEST10
:invocation (! (TEST10)) 
:body
((! (= @N 3))
 (! (PRINT "test 10 while OK start"))
 (WHILE (? (> @N 1))
    (// ((! (= @N (- @N 1)))
        )
        ((! (PRINT "test 10 while OK 1,1"))
         (! (PRINT "test 10 while OK 1,2"))
         (! (PRINT "test 10 while OK 1,3"))
         (! (PRINT "test 10 while OK 1,4"))
         (! (PRINT "test 10 while OK 1,5"))
        )
        ((// ((! (PRINT "test 10 while OK 2 1,1"))
             )
             ((! (PRINT "test 10 while OK 2 2,1"))
              (! (PRINT "test 10 while OK 2 2,2"))
             )
             ((! (PRINT "test 10 while OK 2 3,1"))
              (! (PRINT "test 10 while OK 2 3,2"))
              (! (PRINT "test 10 while OK 2 3,3"))
             )
         )
        )
    )
 )
 (! (PRINT "test 10 while OK end"))
)
)
(defop TEST11
:invocation (! (TEST11)) 
:body
((! (PRINT "test 11 do while OK start"))
 (! (= @N 3))
 (DO
    (// ((! (= @N (- @N 1)))
        )
        ((! (PRINT "test 11 do while OK 1,1"))
         (! (PRINT "test 11 do while OK 1,2"))
         (! (PRINT "test 11 do while OK 1,3"))
         (! (PRINT "test 11 do while OK 1,4"))
         (! (PRINT "test 11 do while OK 1,5"))
        )
        ((// ((! (PRINT "test 11 do while OK 2 1,1"))
             )
             ((! (PRINT "test 11 do while OK 2 2,1"))
              (! (PRINT "test 11 do while OK 2 2,2"))
             )
             ((! (PRINT "test 11 do while OK 2 3,1"))
              (! (PRINT "test 11 do while OK 2 3,2"))
              (! (PRINT "test 11 do while OK 2 3,3"))
             )
         )
        )
    )
  WHILE (? (> @N 1)))
)
)
(defop TEST12
:invocation (! (TEST12)) 
:body
((! (PRINT "test 12 do while OK start"))
 (! (= @N 3))
 (DO
    (// ((! (= @N (- @N 1)))
        )
        ((! (PRINT "test 12 do while OK 1,1"))
         (! (PRINT "test 12 do while OK 1,2"))
         (! (PRINT "test 12 do while OK 1,3"))
         (! (PRINT "test 12 do while OK 1,4"))
         (! (PRINT "test 12 do while OK 1,5"))
        )
        ((// ((! (PRINT "test 12 do while OK 2 1,1"))
             )
             ((! (PRINT "test 12 do while OK 2 2,1"))
              (! (PRINT "test 12 do while OK 2 2,2"))
             )
             ((! (PRINT "test 12 do while OK 2 3,1"))
              (! (PRINT "test 12 do while OK 2 3,2"))
              (! (PRINT "test 12 do while OK 2 3,3"))
             )
         )
        )
    )
  WHILE (? (> @N 1)))
 (! (PRINT "test 12 do while OK end"))
)
)
(defop TEST13
:invocation (! (TEST13)) 
:body
((! (PRINT "test 13 start"))
 (IF (? (> 2 1))
 )
 (! (PRINT "test 13 end"))
)
)
(defop TEST14
:invocation (! (TEST14)) 
:body
((! (PRINT "test 14 start"))
 (IF (? (> 2 1))
 )
 (! (PRINT "test 14 end"))
)
)
(defop TEST15
:invocation (! (TEST15)) 
:body
((! (PRINT "test 15 empty while OK start"))
 (WHILE (? (> 1 1))
    ;;empty body
 )
 (! (PRINT "test 15 empty while OK end"))
)
)
(defop TEST16
:invocation (! (TEST16)) 
:body
((! (PRINT "test 16 empty do while OK start"))
 (DO
    ;;empty body
  WHILE (? (> 1 1)))
 (! (PRINT "test 16 empty do while OK end"))
)
)
(defop TEST17
:invocation (! (TEST17)) 
:body
((! (PRINT "test 17 while break OK start"))
 (! (= @N 10))
 (WHILE (? (> @N 1))
    (! (= @N (- @N 1)))
    (! (PRINT "test 17 should print 3 times"))
    (IF (? (< @N 8))
       BREAK
    )
 )
 (! (PRINT "test 17 while break OK end"))
)
)
(defop TEST18
:invocation (! (TEST18)) 
:body
((! (PRINT "test 18 do while OK start"))
 (! (= @N 10))
 (DO
    (! (PRINT "test 18 should print 3 times"))
    (! (= @N (- @N 1)))
    (IF (? (< @N 8))
       BREAK
    )
  WHILE (? (> @N 1)))
 (! (PRINT "test 18 do while break OK end"))
)
)
(defop TEST19
:invocation (! (TEST19)) 
:body
((! (PRINT "test 19 test unclaimed break OK start"))
 BREAK
 (! (PRINT "test 19 test unclaimed break OK end"))
)
)
(defop TEST2
:invocation (! (TEST2)) 
:body
((// ((! (PRINT "test 2 1"))
     )
     ((! (PRINT "test 2 2"))
     )
 )
 (! (PRINT "test 2 end"))
)
)
(defop TEST20
:invocation (! (TEST20)) 
:body
((! (PRINT "test 20 GOTO LABEL OK start"))
 (! (= @N 10))
 LABEL START
 (! (PRINT "test 20 should print 3 times"))
 (! (= @N (- @N 1)))
 (IF (? (>= @N 8))
    GOTO START
  ELSE
    GOTO END
 )
 LABEL END
 (! (PRINT "test 20 GOTO LABEL OK end"))
)
)
(defop TEST21
:invocation (! (TEST21)) 
:body
((! (PRINT "test 21 GOTO unused LABEL undeclared OK start"))
 LABEL START
 GOTO END
 (! (PRINT "test 21 GOTO unused LABEL undeclared OK end"))
)
)
(defop TEST3
:invocation (! (TEST3)) 
:body
((// ((! (PRINT "test 3 1"))
     )
     ((! (PRINT "test 3 2"))
     )
 )
)
)
(defop TEST4
:invocation (! (TEST4)) 
:body
((! (PRINT "test 4 start"))
 (// ((! (PRINT "test 4 1,1"))
      (! (PRINT "test 4 1,2"))
      (! (PRINT "test 4 1,3"))
      (! (PRINT "test 4 1,4"))
      (! (PRINT "test 4 1,5"))
     )
     ((// ((! (PRINT "test 4 2 1,1"))
          )
          ((! (PRINT "test 4 2 2,1"))
           (! (PRINT "test 4 2 2,2"))
          )
          ((! (PRINT "test 4 2 3,1"))
           (! (PRINT "test 4 2 3,2"))
           (! (PRINT "test 4 2 3,3"))
          )
      )
     )
 )
 (! (PRINT "test 4 end"))
)
)
(defop TEST5
:invocation (! (TEST5)) 
:body
((IF (? (> 2 1))
    (! (PRINT "test 5 then OK start"))
    (// ((! (PRINT "test 5 then OK 1,1"))
         (! (PRINT "test 5 then OK 1,2"))
         (! (PRINT "test 5 then OK 1,3"))
         (! (PRINT "test 5 then OK 1,4"))
         (! (PRINT "test 5 then OK 1,5"))
        )
        ((// ((! (PRINT "test 5 then OK 2 1,1"))
             )
             ((! (PRINT "test 5 then OK 2 2,1"))
              (! (PRINT "test 5 then OK 2 2,2"))
             )
             ((! (PRINT "test 5 then OK 2 3,1"))
              (! (PRINT "test 5 then OK 2 3,2"))
              (! (PRINT "test 5 then OK 2 3,3"))
             )
         )
        )
    )
    (! (PRINT "test 5 then OK end"))
 )
)
)
(defop TEST6
:invocation (! (TEST6)) 
:body
((IF (? (< 2 1))
  ELSE
    (! (PRINT "test 6 else OK start"))
    (// ((! (PRINT "test 6 else OK 1,1"))
         (! (PRINT "test 6 else OK 1,2"))
         (! (PRINT "test 6 else OK 1,3"))
         (! (PRINT "test 6 else OK 1,4"))
         (! (PRINT "test 6 else OK 1,5"))
        )
        ((// ((! (PRINT "test 6 else OK 2 1,1"))
             )
             ((! (PRINT "test 6 else OK 2 2,1"))
              (! (PRINT "test 6 else OK 2 2,2"))
             )
             ((! (PRINT "test 6 else OK 2 3,1"))
              (! (PRINT "test 6 else OK 2 3,2"))
              (! (PRINT "test 6 else OK 2 3,3"))
             )
         )
        )
    )
    (! (PRINT "test 6 else OK end"))
 )
)
)
(defop TEST7
:invocation (! (TEST7)) 
:body
((IF (? (< 2 1))
    (! (PRINT "test 7 then ERROR start"))
    (// ((! (PRINT "test 7 then ERROR 1,1"))
         (! (PRINT "test 7 then ERROR 1,2"))
         (! (PRINT "test 7 then ERROR 1,3"))
         (! (PRINT "test 7 then ERROR 1,4"))
         (! (PRINT "test 7 then ERROR 1,5"))
        )
        ((// ((! (PRINT "test 7 then ERROR 2 1,1"))
             )
             ((! (PRINT "test 7 then ERROR 2 2,1"))
              (! (PRINT "test 7 then ERROR 2 2,2"))
             )
             ((! (PRINT "test 7 then ERROR 2 3,1"))
              (! (PRINT "test 7 then ERROR 2 3,2"))
              (! (PRINT "test 7 then ERROR 2 3,3"))
             )
         )
        )
    )
    (! (PRINT "test 7 then ERROR end"))
  ELSE
    (! (PRINT "test 7 else OK start"))
    (// ((! (PRINT "test 7 else OK 1,1"))
         (! (PRINT "test 7 else OK 1,2"))
         (! (PRINT "test 7 else OK 1,3"))
         (! (PRINT "test 7 else OK 1,4"))
         (! (PRINT "test 7 else OK 1,5"))
        )
        ((// ((! (PRINT "test 7 else OK 2 1,1"))
             )
             ((! (PRINT "test 7 else OK 2 2,1"))
              (! (PRINT "test 7 else OK 2 2,2"))
             )
             ((! (PRINT "test 7 else OK 2 3,1"))
              (! (PRINT "test 7 else OK 2 3,2"))
              (! (PRINT "test 7 else OK 2 3,3"))
             )
         )
        )
    )
    (! (PRINT "test 7 else OK end"))
 )
)
)
(defop TEST8
:invocation (! (TEST8)) 
:body
((IF (? (> 2 1))
    (! (PRINT "test 8 then OK start"))
    (// ((! (PRINT "test 8 then OK 1,1"))
         (! (PRINT "test 8 then OK 1,2"))
         (! (PRINT "test 8 then OK 1,3"))
         (! (PRINT "test 8 then OK 1,4"))
         (! (PRINT "test 8 then OK 1,5"))
        )
        ((// ((! (PRINT "test 8 then OK 2 1,1"))
             )
             ((! (PRINT "test 8 then OK 2 2,1"))
              (! (PRINT "test 8 then OK 2 2,2"))
             )
             ((! (PRINT "test 8 then OK 2 3,1"))
              (! (PRINT "test 8 then OK 2 3,2"))
              (! (PRINT "test 8 then OK 2 3,3"))
             )
         )
        )
    )
    (! (PRINT "test 8 then OK end"))
  ELSE
    (! (PRINT "test 8 else ERROR start"))
    (// ((! (PRINT "test 8 else ERROR 1,1"))
         (! (PRINT "test 8 else ERROR 1,2"))
         (! (PRINT "test 8 else ERROR 1,3"))
         (! (PRINT "test 8 else ERROR 1,4"))
         (! (PRINT "test 8 else ERROR 1,5"))
        )
        ((// ((! (PRINT "test 8 else ERROR 2 1,1"))
             )
             ((! (PRINT "test 8 else ERROR 2 2,1"))
              (! (PRINT "test 8 else ERROR 2 2,2"))
             )
             ((! (PRINT "test 8 else ERROR 2 3,1"))
              (! (PRINT "test 8 else ERROR 2 3,2"))
              (! (PRINT "test 8 else ERROR 2 3,3"))
             )
         )
        )
    )
    (! (PRINT "test 8 else ERROR end"))
 )
)
)
(defop TEST9
:invocation (! (TEST9)) 
:body
((! (= @N 3))
 (WHILE (? (> @N 1))
    (// ((! (= @N (- @N 1)))
        )
        ((! (PRINT "test 9 while OK 1,1"))
         (! (PRINT "test 9 while OK 1,2"))
         (! (PRINT "test 9 while OK 1,3"))
         (! (PRINT "test 9 while OK 1,4"))
         (! (PRINT "test 9 while OK 1,5"))
        )
        ((// ((! (PRINT "test 9 while OK 2 1,1"))
             )
             ((! (PRINT "test 9 while OK 2 2,1"))
              (! (PRINT "test 9 while OK 2 2,2"))
             )
             ((! (PRINT "test 9 while OK 2 3,1"))
              (! (PRINT "test 9 while OK 2 3,2"))
              (! (PRINT "test 9 while OK 2 3,3"))
             )
         )
        )
    )
 )
)
)
(defop TOPF
:invocation (TOPF) 
:body
((! (TEST1))
 (! (TEST2))
 (! (TEST3))
 (! (TEST4))
 (! (TEST5))
 (! (TEST6))
 (! (TEST7))
 (! (TEST8))
 (! (TEST9))
 (! (TEST10))
 (! (TEST11))
 (! (TEST12))
 (! (TEST13))
 (! (TEST14))
 (! (TEST15))
 (! (TEST16))
 (! (TEST17))
 (! (TEST18))
 (! (TEST19))
 (! (TEST20))
)
)
)
