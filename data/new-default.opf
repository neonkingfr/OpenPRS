;;;
;;; File: /home/felix/C/oprs/src/data/new-default.opf
;;; $Id$
;;; Date: Mon Mar  1 17:43:54 1999
;;; Host: elf
;;; OP Editor Version: 2.0.0 Beta
;;; Compiled on elf (Mon Mar  1 15:55:40 MET 1999)
;;; OP File Format: 2
;;;
(2 
(
)
(|Apply-Sort-Predicate-To-All| (
(INVOCATION INVOCATION (! (APPLY-SORT-PREDICATE-TO-ALL)) 10 50 1 80 0 )
(CALL CALLNODE  (APPLY-SORT-PREDICATE-TO-ALL) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 200 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (APPLY-SORT-PREDICATE-TO-ALL) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will apply the sort intentions function, to
all the intentions." 10 150 1 60 0 )
(PROPERTIES PROPERTIES ((DECISION-PROCEDURE T)) 10 100 1 60 0 )
) (
) (
) )
(|Asleep Intention Cond| (
(INVOCATION INVOCATION (! (ASLEEP-INTENTION-COND $X $COND)) 10 50 1 80 0 )
(CALL CALLNODE  (ASLEEP-INTENTION-COND $X $COND) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (ASLEEP-INTENTION-COND $X $COND) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will asleep the intention in $x the LISP_CAR containing an
intention passed as argument.
It will add the gexpr built from the TermComp $COND
in the activation condition." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Asleep Intentions Cond| (
(INVOCATION INVOCATION (! (ASLEEP-INTENTIONS-COND $X $COND)) 10 50 1 80 0 )
(CALL CALLNODE  (ASLEEP-INTENTIONS-COND $X $COND) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (ASLEEP-INTENTIONS-COND $X $COND) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will asleep all the intentions in $x the LISP_LIST
of intentions passed as argument.
It will add the gexpr built from the TermComp $COND
in the activation condition." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Asleep Intentions| (
(INVOCATION INVOCATION (! (ASLEEP-INTENTIONS $X $ID)) 10 50 1 80 0 )
(CALL CALLNODE  (ASLEEP-INTENTIONS $X $ID) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (ASLEEP-INTENTIONS $X $ID) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will asleep all the intentions in $x the LISP_LIST of
intentions passed as argument.
It will add the fact (WAKE-UP-INTENTION $ID) in the activation condition." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Asleep Intention| (
(INVOCATION INVOCATION (! (ASLEEP-INTENTION $X $ID)) 10 50 1 80 0 )
(CALL CALLNODE  (ASLEEP-INTENTION $X $ID) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (ASLEEP-INTENTION $X $ID) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will asleep the intention in $x the LISP_CAR containing an
intention passed as argument.
It will add the fact (WAKE-UP-INTENTION $ID) in the activation condition." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Broadcast Message| (
(INVOCATION INVOCATION (! (BROADCAST-MESSAGE $MESSAGE)) 8 41 1 80 0 )
(CALL CALLNODE  (BROADCAST-MESSAGE $MESSAGE) 8 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (BROADCAST-MESSAGE $MESSAGE) 310 53 1 60 0 )
(DOCUMENTATION DOCUMENTATION "Send the message $MESSAGE to all the agents
 registered to the message passer, except the sender." 5 135 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|End Critical Section| (
(INVOCATION INVOCATION (! (END-CRITICAL-SECTION)) 10 50 1 60 0 )
(CALL CALLNODE  (END-CRITICAL-SECTION) 10 100 1 60 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (END-CRITICAL-SECTION) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will quit the critical section of the current intention." 6 138 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Execute Command| (
(INVOCATION INVOCATION (! (EXECUTE-COMMAND $COMMAND)) 10 50 1 60 0 )
(CALL CALLNODE  (EXECUTE-COMMAND $COMMAND) 10 100 1 60 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (EXECUTE-COMMAND $COMMAND) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP execute the command given as argument." 7 120 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Fail| (
(INVOCATION INVOCATION (! (FAILED)) 10 50 1 60 0 )
(CALL CALLNODE  (FAILED) 10 100 1 60 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (FAIL) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This action will fail... This OP can be used to
fail the branch of a OP, for example" 7 98 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Get All Intentions| (
(INVOCATION INVOCATION (! (GET-ALL-INTENTIONS $LI)) 10 50 1 80 0 )
(CALL CALLNODE  (GET-ALL-INTENTIONS $LI) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $LI
     (GET-ALL-INTENTIONS)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will return the LISP-LIST of
all the intentions." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Get Current Intention| (
(INVOCATION INVOCATION (! (GET-CURRENT-INTENTION $CI)) 10 50 1 80 0 )
(CALL CALLNODE  (GET-CURRENT-INTENTION $CI) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $CI
     (GET-CURRENT-INTENTION)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will return the current 
intention in the LISP_CAR $CI ." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Get Float Array| (
(INVOCATION INVOCATION (! (GET-FLOAT-ARRAY $ARRAY $INDEX $VALUE)) 10 50 1 80 0 )
(CALL CALLNODE  (GET-FLOAT-ARRAY $ARRAY $INDEX $VALUE) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $VALUE
     (GET-FLOAT-ARRAY $ARRAY $INDEX)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP get the $VALUE contained in the float (double) array 
$ARRAY at indice $INDEX." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Get Int Array| (
(INVOCATION INVOCATION (! (GET-INT-ARRAY $ARRAY $INDEX $VALUE)) 10 50 1 80 0 )
(CALL CALLNODE  (GET-INT-ARRAY $ARRAY $INDEX $VALUE) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $VALUE
     (GET-INT-ARRAY $ARRAY $INDEX)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP get the $VALUE contained in the int array 
$ARRAY at indice $INDEX." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Get Intention Priority| (
(INVOCATION INVOCATION (! (GET-INTENTION-PRIORITY $I $P)) 10 50 1 80 0 )
(CALL CALLNODE  (GET-INTENTION-PRIORITY $I $P) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $P
     (GET-INTENTION-PRIORITY $I)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will return the Priority of the 
intention in the LISP_CAR $I ." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Get Intention Time| (
(INVOCATION INVOCATION (! (GET-INTENTION-TIME $I $T)) 10 50 1 80 0 )
(CALL CALLNODE  (GET-INTENTION-TIME $I $T) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $T
     (GET-INTENTION-TIME $I)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will return the Time (Date of Creation in sec)
 of the intention in the LISP_CAR $I ." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Get Other Intentions| (
(INVOCATION INVOCATION (! (GET-OTHER-INTENTIONS $LI)) 10 50 1 80 0 )
(CALL CALLNODE  (GET-OTHER-INTENTIONS $LI) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $LI
     (GET-OTHER-INTENTIONS)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will return the LISP-LIST of
the other intentions." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Get Root Intentions| (
(INVOCATION INVOCATION (! (GET-ROOT-INTENTIONS $LI)) 10 50 1 80 0 )
(CALL CALLNODE  (GET-ROOT-INTENTIONS $LI) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $LI
     (GET-ROOT-INTENTIONS)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will return the LISP-LIST of
the root intentions." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Get Sleeping Intentions| (
(INVOCATION INVOCATION (! (GET-SLEEPING-INTENTIONS $LI)) 10 50 1 80 0 )
(CALL CALLNODE  (GET-SLEEPING-INTENTIONS $LI) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $LI
     (GET-SLEEPING-INTENTIONS)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will return the LISP-LIST of
the sleeping intentions." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Kill Intentions| (
(INVOCATION INVOCATION (! (KILL-INTENTIONS $X)) 10 50 1 80 0 )
(CALL CALLNODE  (KILL-INTENTIONS $X) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (KILL-INTENTIONS $X) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will kill all the intentions in $x the LISP_LIST of
intentions passed as argument." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Kill Intention| (
(INVOCATION INVOCATION (! (KILL-INTENTION $X)) 10 50 1 80 0 )
(CALL CALLNODE  (KILL-INTENTION $X) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (KILL-INTENTION $X) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will kill the intention in $x the LISP_CAR containing an
intentions passed as argument." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Kill other intentions| (
(INVOCATION INVOCATION (! (KILL-OTHER-INTENTIONS)) 10 43 1 80 0 )
(CALL CALLNODE  (KILL-OTHER-INTENTIONS) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (KILL-OTHER-INTENTIONS) 384 43 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will kill all the other intentions in the intention graph.
(it is a very dangerous action OP). Note that it does not
kill itself." 4 93 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Make Float Array| (
(INVOCATION INVOCATION (! (MAKE-FLOAT-ARRAY $SIZE $ARRAY)) 10 50 1 80 0 )
(CALL CALLNODE  (MAKE-FLOAT-ARRAY $SIZE $ARRAY) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $ARRAY
     (MAKE-FLOAT-ARRAY $SIZE)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP create a float (in fact double) array of size $SIZE and return
the value in $ARRAY." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Make Int Array| (
(INVOCATION INVOCATION (! (MAKE-INT-ARRAY $SIZE $ARRAY)) 10 50 1 80 0 )
(CALL CALLNODE  (MAKE-INT-ARRAY $SIZE $ARRAY) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $ARRAY
     (MAKE-INT-ARRAY $SIZE)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP create an int array of size $SIZE and return
the value in $ARRAY." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Meta Intend After| (
(INVOCATION INVOCATION (! (INTENDED-OP-AFTER $X $INTENDED-LIST)) 13 39 1 80 0 )
(CALL CALLNODE  (INTENDED-OP-AFTER $X $INTENDED-LIST) 13 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (INTEND-OP-AFTER $X $INTENDED-LIST) 393 38 1 60 0 )
(DOCUMENTATION DOCUMENTATION "To intend an applicable OP ($X a Op Instance LISP_CAR), 
after a list of already intended procedure." 8 159 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Meta Intend All OPs As Root| (
(INVOCATION INVOCATION (! (INTENDED-ALL-OPS-AS-ROOT $X)) 5 58 1 80 0 )
(CALL CALLNODE  (INTENDED-ALL-OPS-AS-ROOT $X) 5 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (INTEND-ALL-OPS-AS-ROOT $X) 302 56 1 60 0 )
(DOCUMENTATION DOCUMENTATION "Intend all the OPs in $X (a LISP_LIST of OP Instance)
 as roots of the intention graph." 8 138 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Meta Intend All OPs| (
(INVOCATION INVOCATION (! (INTENDED-ALL-OPS $X)) 7 49 1 80 0 )
(CALL CALLNODE  (INTENDED-ALL-OPS $X) 7 100 1 80 0 )
(CONTEXT CONTEXT  6 170 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (INTEND-ALL-OPS $X) 304 54 1 60 0 )
(DOCUMENTATION DOCUMENTATION "Intend all the OPs in the $x (a LISP_LIST of OP Instance) list." 6 107 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Meta Intend All Ops After| (
(INVOCATION INVOCATION (! (INTENDED-ALL-OPS-AFTER $X $INTENDED-LIST)) 13 39 1 80 0 )
(CALL CALLNODE  (INTENDED-ALL-OPS-AFTER $X $INTENDED-LIST) 13 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (INTEND-ALL-OPS-AFTER $X $INTENDED-LIST) 393 38 1 60 0 )
(DOCUMENTATION DOCUMENTATION "To intend all the OPs in $X ( a LISP_LIST of Op Instances),
after a list of already intended procedure." 8 159 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Meta Intend with Priority After| (
(INVOCATION INVOCATION (! (INTENDED-OP-WITH-PRIORITY-AFTER $X $P $INTENDED-LIST)) 30 100 1 80 0 )
(CALL CALLNODE  (INTENDED-OP-WITH-PRIORITY-AFTER $X $P $INTENDED-LIST) 30 100 1 80 0 )
(CONTEXT CONTEXT  30 200 0 60 0 )
(SETTING SETTING  27 249 0 60 0 )
(EFFECTS EFFECTS  30 300 0 60 0 )
(ACTION ACTION (INTEND-OP-WITH-PRIORITY-AFTER $X $P $INTENDED-LIST) 374 138 1 60 0 )
(DOCUMENTATION DOCUMENTATION "To intend an applicable OP ($X a Op Instance LISP_CAR)
based upon PRIORITY ($P a Term Integer LISP_CAR), after
a list of already intended procedure." 23 206 1 60 0 )
(PROPERTIES PROPERTIES  30 400 0 60 0 )
) (
) (
) )
(|Meta Intend with Priority| (
(INVOCATION INVOCATION (! (INTENDED-OP-WITH-PRIORITY $X $P)) 30 100 1 80 0 )
(CALL CALLNODE  (INTENDED-OP-WITH-PRIORITY $X $P) 30 100 1 80 0 )
(CONTEXT CONTEXT  30 200 0 60 0 )
(SETTING SETTING  27 249 0 60 0 )
(EFFECTS EFFECTS  30 300 0 60 0 )
(ACTION ACTION (INTEND-OP-WITH-PRIORITY $X $P) 400 100 1 60 0 )
(DOCUMENTATION DOCUMENTATION "The simplest way to intend an applicable OP ($X a Op Instance LISP_CAR)
based upon PRIORITY ($P a Term Integer LISP_CAR)." 23 206 1 60 0 )
(PROPERTIES PROPERTIES  30 400 0 60 0 )
) (
) (
) )
(|Meta Intend| (
(INVOCATION INVOCATION (! (INTENDED-OP $X)) 13 40 1 80 0 )
(CALL CALLNODE  (INTENDED-OP $X) 13 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (INTEND-OP $X) 310 44 1 60 0 )
(DOCUMENTATION DOCUMENTATION "The simplest way to intend an applicable OP 
($X a Op Instance LISP_CAR)." 8 159 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Multicast Message| (
(INVOCATION INVOCATION (! (MULTICAST-MESSAGE $AGENTS $MESSAGE)) 8 41 1 80 0 )
(CALL CALLNODE  (MULTICAST-MESSAGE $AGENTS $MESSAGE) 8 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (MULTICAST-MESSAGE $AGENTS $MESSAGE) 310 53 1 60 0 )
(DOCUMENTATION DOCUMENTATION "Multicast the message $MESSAGE to the oprs in the $AGENTS lisp list." 5 135 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Print (just print an object)| (
(INVOCATION INVOCATION (! (PRINT $X)) 8 45 1 80 0 )
(CALL CALLNODE  (PRINT $X) 8 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (PRINT $X) 309 42 1 60 0 )
(DOCUMENTATION DOCUMENTATION "Print the value of $x in the Text Pane" 5 154 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Print Window C Format| (
(INVOCATION INVOCATION (! (PRINTF-WINDOW $w $X)) 30 100 1 80 0 )
(CALL CALLNODE  (PRINTF-WINDOW $w $X) 30 100 1 80 0 )
(CONTEXT CONTEXT  33 174 0 60 0 )
(SETTING SETTING  30 227 0 60 0 )
(EFFECTS EFFECTS  30 300 0 60 0 )
(ACTION ACTION (PRINTF-WINDOW $W $X) 398 101 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP prints a (format ) statement in an existing window (under X only).
It accepts some of the % C directives (%d %s %f %g %%).
Example : (printf 0x12345 (format \"The %d of %s is %f.\" $x $y $z))" 24 172 1 60 0 )
(PROPERTIES PROPERTIES  30 400 0 60 0 )
) (
) (
) )
(|Manage Window| (
(INVOCATION INVOCATION (! (MANAGE-WINDOW $w)) 30 100 1 80 0 )
(CALL CALLNODE  (MANAGE-WINDOW $w) 30 100 1 80 0 )
(CONTEXT CONTEXT  33 174 0 60 0 )
(SETTING SETTING  30 227 0 60 0 )
(EFFECTS EFFECTS  30 300 0 60 0 )
(ACTION ACTION (MANAGE-WINDOW $w) 398 101 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP manage an existing window" 24 172 1 60 0 )
(PROPERTIES PROPERTIES  30 400 0 60 0 )
) (
) (
) )
(|Rename Window| (
(INVOCATION INVOCATION (! (RENAME-WINDOW $w $t)) 30 100 1 80 0 )
(CALL CALLNODE  (RENAME-WINDOW $w $t) 30 100 1 80 0 )
(CONTEXT CONTEXT  33 174 0 60 0 )
(SETTING SETTING  30 227 0 60 0 )
(EFFECTS EFFECTS  30 300 0 60 0 )
(ACTION ACTION (RENAME-WINDOW $w $t) 398 101 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP rename an existing window" 24 172 1 60 0 )
(PROPERTIES PROPERTIES  30 400 0 60 0 )
) (
) (
) )
(|Unmanage Window| (
(INVOCATION INVOCATION (! (UNMANAGE-WINDOW $w)) 30 100 1 80 0 )
(CALL CALLNODE  (UNMANAGE-WINDOW $w) 30 100 1 80 0 )
(CONTEXT CONTEXT  33 174 0 60 0 )
(SETTING SETTING  30 227 0 60 0 )
(EFFECTS EFFECTS  30 300 0 60 0 )
(ACTION ACTION (UNMANAGE-WINDOW $w) 398 101 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP unmanage an existing window" 24 172 1 60 0 )
(PROPERTIES PROPERTIES  30 400 0 60 0 )
) (
) (
) )
(|Delete Window| (
(INVOCATION INVOCATION (! (DELETE-WINDOW $w)) 30 100 1 80 0 )
(CALL CALLNODE  (DELETE-WINDOW $w) 30 100 1 80 0 )
(CONTEXT CONTEXT  33 174 0 60 0 )
(SETTING SETTING  30 227 0 60 0 )
(EFFECTS EFFECTS  30 300 0 60 0 )
(ACTION ACTION (DELETE-WINDOW $w) 398 101 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP delete an existing window" 24 172 1 60 0 )
(PROPERTIES PROPERTIES  30 400 0 60 0 )
) (
) (
) )
(|Print C Format| (
(INVOCATION INVOCATION (! (PRINTF $X)) 30 100 1 80 0 )
(CALL CALLNODE  (PRINTF $X) 30 100 1 80 0 )
(CONTEXT CONTEXT  33 174 0 60 0 )
(SETTING SETTING  30 227 0 60 0 )
(EFFECTS EFFECTS  30 300 0 60 0 )
(ACTION ACTION (PRINTF $X) 398 101 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP prints a (format ) statement. 
It accepts some of the % C directives (%d %s %f %g %%).
Example : (printf (format \"The %d of %s is %f.\" $x $y $z))" 24 172 1 60 0 )
(PROPERTIES PROPERTIES  30 400 0 60 0 )
) (
) (
) )
(|Print List (Format like printing)| (
(INVOCATION INVOCATION (! (PRINT-LIST $X)) 30 100 1 80 0 )
(CALL CALLNODE  (PRINT-LIST $X) 30 100 1 80 0 )
(CONTEXT CONTEXT  33 174 0 60 0 )
(SETTING SETTING  30 227 0 60 0 )
(EFFECTS EFFECTS  30 300 0 60 0 )
(ACTION ACTION (PRINT-INSIDE $X) 400 100 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP prints a (format nil ....) statement. This is a
remanence of the LISP version of OPRS. It does not accept
all the ~ directives, but accepts some of the % C directives." 24 172 1 60 0 )
(PROPERTIES PROPERTIES  30 400 0 60 0 )
) (
) (
) )
(|Read Inside Id Var| (
(INVOCATION INVOCATION (! (READ-INSIDE-ID-VAR $X $VAL)) 28 52 1 80 0 )
(CALL CALLNODE  (READ-INSIDE-ID-VAR $X $VAL) 28 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (READ-INSIDE-ID-VAR $X $VAL) 375 52 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will asleep the current intention 
until we got the fact (READ-RESPONSE $X $VAL)." 21 113 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Read Inside Id| (
(INVOCATION INVOCATION (! (READ-INSIDE-ID $X $VAL)) 10 52 1 80 0 )
(CALL CALLNODE  (READ-INSIDE-ID $X $VAL) 10 100 1 80 0 )
(CONTEXT CONTEXT  82 344 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $VAL
     (READ-INSIDE-ID $X)) 306 52 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will asleep the current intention 
until we got the fact (READ-RESPONSE $X $VAL)." 8 121 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Read Inside| (
(INVOCATION INVOCATION (! (READ-INSIDE $VAL)) 10 50 1 80 0 )
(CALL CALLNODE  (READ-INSIDE $VAL) 10 100 1 80 0 )
(CONTEXT CONTEXT  34 204 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (*=* $VAL
     (READ-INSIDE)) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will asleep the current intention 
until we got the fact (READ-RESPONSE $VAL)." 8 106 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Send Message| (
(INVOCATION INVOCATION (! (SEND-MESSAGE $OPRS $MESSAGE)) 8 41 1 80 0 )
(CALL CALLNODE  (SEND-MESSAGE $OPRS $MESSAGE) 8 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (SEND-MESSAGE $OPRS $MESSAGE) 310 53 1 60 0 )
(DOCUMENTATION DOCUMENTATION "Send the message $MESSAGE to the oprs $OPRS agent." 5 135 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Send String| (
(INVOCATION INVOCATION (! (SEND-STRING $AGENT $STRING)) 8 41 1 80 0 )
(CALL CALLNODE  (SEND-STRING $AGENT $STRING) 8 100 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS  10 310 0 60 0 )
(ACTION ACTION (SEND-STRING $AGENT $STRING) 310 53 1 60 0 )
(DOCUMENTATION DOCUMENTATION "Send the string $STRING to the $AGENT." 5 135 1 60 0 )
(PROPERTIES PROPERTIES  10 360 0 60 0 )
) (
) (
) )
(|Set Float Array| (
(INVOCATION INVOCATION (! (SET-FLOAT-ARRAY $ARRAY $INDEX $VALUE)) 10 50 1 80 0 )
(CALL CALLNODE  (SET-FLOAT-ARRAY $ARRAY $INDEX $VALUE) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (SET-FLOAT-ARRAY $ARRAY $INDEX $VALUE) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP set the $VALUE contained in the float array 
$ARRAY at indice $INDEX." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Set Int Array| (
(INVOCATION INVOCATION (! (SET-INT-ARRAY $ARRAY $INDEX $VALUE)) 10 50 1 80 0 )
(CALL CALLNODE  (SET-INT-ARRAY $ARRAY $INDEX $VALUE) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (SET-INT-ARRAY $ARRAY $INDEX $VALUE) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP set the $VALUE contained in the int array 
$ARRAY at indice $INDEX." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Set Intention Priority| (
(INVOCATION INVOCATION (! (SET-INTENTION-PRIORITY $I $P)) 10 50 1 80 0 )
(CALL CALLNODE  (SET-INTENTION-PRIORITY $I $P) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (SET-INTENTION-PRIORITY $I $P) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will set the Priority $P to the 
intention in the LISP_CAR $I ." 4 139 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Sort Intention None| (
(INVOCATION INVOCATION (! (SORT-INTENTION-NONE)) 10 50 1 80 0 )
(CALL CALLNODE  (SORT-INTENTION-NONE) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 200 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (SORT-INTENTION-NONE) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will unset the sort intentions function." 10 150 1 60 0 )
(PROPERTIES PROPERTIES ((DECISION-PROCEDURE T)) 10 100 1 60 0 )
) (
) (
) )
(|Sort Intention Priority Time| (
(INVOCATION INVOCATION (! (SORT-INTENTION-PRIORITY-TIME)) 10 50 1 80 0 )
(CALL CALLNODE  (SORT-INTENTION-PRIORITY-TIME) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (SORT-INTENTION-PRIORITY-TIME) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will set the sort intentions function
to Priority then Time." 10 150 1 60 0 )
(PROPERTIES PROPERTIES ((DECISION-PROCEDURE T)) 10 100 1 60 0 )
) (
) (
) )
(|Sort Intention Priority| (
(INVOCATION INVOCATION (! (SORT-INTENTION-PRIORITY)) 10 50 1 80 0 )
(CALL CALLNODE  (SORT-INTENTION-PRIORITY) 10 100 1 80 0 )
(CONTEXT CONTEXT  7 211 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (SORT-INTENTION-PRIORITY) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will set the sort intentions function
to Priority." 10 150 1 60 0 )
(PROPERTIES PROPERTIES ((DECISION-PROCEDURE T)) 10 100 1 60 0 )
) (
) (
) )
(|Sort Intention Time| (
(INVOCATION INVOCATION (! (SORT-INTENTION-TIME)) 10 50 1 80 0 )
(CALL CALLNODE  (SORT-INTENTION-TIME) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (SORT-INTENTION-TIME) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will set the sort intentions function
to Time." 10 150 1 60 0 )
(PROPERTIES PROPERTIES ((DECISION-PROCEDURE T)) 10 100 1 60 0 )
) (
) (
) )
(|Start Critical Section| (
(INVOCATION INVOCATION (! (START-CRITICAL-SECTION)) 10 50 1 60 0 )
(CALL CALLNODE  (START-CRITICAL-SECTION) 10 100 1 60 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (START-CRITICAL-SECTION) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will put the current intention in a critical section." 12 148 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Succeed| (
(INVOCATION INVOCATION (! (SUCCEED)) 10 50 1 60 0 )
(CALL CALLNODE  (SUCCEED) 10 100 1 60 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (SUCCEED) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This action will succeed... This OP can be used to
make a branch which always succeeds" 7 98 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Tag Current Intention| (
(INVOCATION INVOCATION (! (TAG-CURRENT-INTENTION $X)) 10 50 1 80 0 )
(CALL CALLNODE  (TAG-CURRENT-INTENTION $X) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (TAG-CURRENT-INTENTION $X) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP when executed will tag the current intention, i.e. the
intention in which it is executed with the ID $X passed in argument." 6 130 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
(|Wake-Up Intention| (
(INVOCATION INVOCATION (! (WAKE-UP-INTENTION $ID)) 10 50 1 80 0 )
(CALL CALLNODE  (WAKE-UP-INTENTION $ID) 10 100 1 80 0 )
(CONTEXT CONTEXT  10 150 0 60 0 )
(SETTING SETTING  10 250 0 60 0 )
(EFFECTS EFFECTS  10 350 0 60 0 )
(ACTION ACTION (WAKE-UP-INTENTION $ID) 310 50 1 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP will wake-up all the intentions 
asleep with this ID ." 10 150 1 60 0 )
(PROPERTIES PROPERTIES  10 400 0 60 0 )
) (
) (
) )
)
