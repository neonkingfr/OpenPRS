;;;
;;; File: fact-meta-if.opf
;;; $Id$
;;; Date: Wed Nov 17 16:58:01 1993
;;; Host: cascade
;;; OP Editor Version : 1.1.14
;;; Compiled on cascade (Wed Nov 17 16:44:13 MET 1993)
;;; OP File Format: 2
;;;
(2 
(
)
(|Iterative Factorial| (
(INVOCATION INVOCATION (! (FACTORIAL $N $RESULT)) 11 41 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS () 10 310 0 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP  computes the Factorial of $n and unifies the result with $result.
 It uses an iterative algorithm operating on local variables.
Note the RECRUSIVE NIL property which will be used by the
Meta level OP." 10 410 1 60 0 )
(PROPERTIES PROPERTIES ((RECURSIVE NIL)) 10 360 1 60 0 )
) (
(PROCESS S4 0 0 320 101)
(PROCESS S1 0 0 321 163)
(PROCESS S6 0 0 551 162)
(END END1 0 0 189 329)
(START START 0 0 309 22)
(IF N0 0 0 320 261)
(THEN N0_T 0 0 306 261)
(ELSE N0_F 0 0 341 261)
) (
(GOAL N0_F E4 S6
(! (= @RES (* @RES @TMP)))
((561 270) )  0 0 40 0)
(GOAL N0_T E3 END1
(! (= $RESULT @RES))
((206 270) )  28 1 40 0)
(IF S1 E2 N0
(? (<= @TMP 1))
()  0 0 40 0)
(ELSE N0 E1 N0_F)
(THEN N0 E0 N0_T)
(GOAL START E0087 S4
(! (= @TMP $N))
()  0 0 40 0)
(GOAL S6 E0128 S1
(! (= @TMP (- @TMP 1)))
()  11 -6 40 0)
(GOAL S4 E0109 S1
(! (= @RES 1))
()  0 0 40 0)
) )
(|Meta Factorial| (
(INVOCATION INVOCATION (SOAK $X) 9 43 1 80 0 )
(CONTEXT CONTEXT (& (EQUAL (LENGTH $X) 2)
     (EQUAL
         (OP-INSTANCE-GOAL (FIRST $X))
         (OP-INSTANCE-GOAL (SECOND $X)))) 9 109 1 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS () 10 310 0 60 0 )
(DOCUMENTATION DOCUMENTATION "This Meta OP chooses which Factorial OP to intend according
to the presence or not of the recursive property on the
applicable OPs. 
Do not use this Meta OP in other applications." 9 462 1 60 0 )
(PROPERTIES PROPERTIES ((DECISION-PROCEDURE T)) 9 360 1 60 0 )
) (
(END END1 0 0 369 412)
(END END2 0 0 686 503)
(PROCESS N5 0 0 377 328)
(PROCESS S7 0 0 693 339)
(START START 0 0 283 27)
(END END3 0 0 695 246)
(IF N0 0 0 295 126)
(THEN N0_T 0 0 281 126)
(ELSE N0_F 0 0 316 126)
(IF N6 0 0 503 180)
(THEN N6_T 0 0 489 180)
(ELSE N6_F 0 0 524 180)
) (
(GOAL S7 E0198 END2
(! (INTENDED-OP (SECOND $X)))
()  -5 11 40 0)
(GOAL N5 E0197 END1
(! (INTENDED-OP (FIRST $X)))
()  1 -12 40 0)
(THEN N0 E0 N0_T)
(ELSE N0 E1 N0_F)
(IF START E4 N0
(? (PREFER-ITERATIVE))
()  0 0 40 0)
(GOAL N0_T E5 S7
(? (PROPERTY-P RECURSIVE (FIRST $X)))
((220 328) (330 470) (547 470) )  -98 -132 40 0)
(GOAL N0_T E6 N5
(? (~ (PROPERTY-P
          RECURSIVE (FIRST $X))))
()  36 -31 40 0)
(THEN N6 E7 N6_T)
(ELSE N6 E8 N6_F)
(IF N0_F E9 N6
(? (PREFER-RECURSIVE))
((513 135) )  -60 -2 40 0)
(GOAL N6_T E10 N5
(? (PROPERTY-P
       RECURSIVE (FIRST $X)))
()  31 19 30 0)
(GOAL N6_T E11 S7
(? (~ (PROPERTY-P
          RECURSIVE (FIRST $X))))
((502 243) )  78 23 40 0)
(GOAL N6_F E12 END3
(! (INTENDED-OP (SELECT-RANDOMLY $X)))
((711 189) )  -50 -1 40 0)
) )
(|Print Factorial| (
(INVOCATION INVOCATION (! (PRINT-FACTORIAL $X)) 12 74 1 80 0 )
(CONTEXT CONTEXT  15 131 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS () 10 310 0 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP just looks for the factorial of $x and prints the result." 10 410 1 60 0 )
(PROPERTIES PROPERTIES () 10 360 0 60 0 )
) (
(START START 0 0 272 134)
(PROCESS S1 0 0 282 208)
(END END1 0 0 275 341)
) (
(GOAL S1 E0155 END1
(! (PRINT-LIST
       (FORMAT
           NIL
           "The Factorial of ~a is ~a.
"
           $X
           $N)))
()  70 -9 40 0)
(GOAL START E0131 S1
(! (FACTORIAL $X $N))
()  0 -6 40 0)
) )
(|Recursive Factorial| (
(INVOCATION INVOCATION (! (FACTORIAL $N $RESULT)) 11 46 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS () 10 310 0 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP computes the Factorial of $n in a recursive manner.
Note the RECURSIVE T property which will be used by the 
Meta OP to decide which OP to intend." 10 410 1 60 0 )
(PROPERTIES PROPERTIES ((RECURSIVE T)) 10 360 1 60 0 )
) (
(START START 0 0 315 97)
(PROCESS S4 0 0 422 234)
(END END1 0 0 224 260)
(END END2 0 0 417 310)
(IF N0 0 0 326 175)
(THEN N0_T 0 0 312 175)
(ELSE N0_F 0 0 347 175)
) (
(GOAL N0_F E4 S4
(! (FACTORIAL (- $N 1) $RES2))
((432 183) )  54 23 40 0)
(GOAL N0_T E3 END1
(! (= $RESULT $N))
((240 183) )  -3 29 40 0)
(IF START E2 N0
(? (<= $N 1))
()  0 0 40 0)
(ELSE N0 E1 N0_F)
(THEN N0 E0 N0_T)
(GOAL S4 E0177 END2
(! (= $RESULT (* $N $RES2)))
()  0 -6 40 0)
) )
(|Test //| (
(INVOCATION INVOCATION (TEST_PAR) 12 44 1 80 0 )
(CONTEXT CONTEXT  11 111 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS () 10 310 0 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP is here to illustrate the mechanism to intend in
parallel a certain number of goals.
In this case, the goal (! (print-factorial $x)) will be intended
in // for all the values 4, 5, 6 and 7." 10 410 1 60 0 )
(PROPERTIES PROPERTIES () 10 360 0 60 0 )
) (
(END END0 0 0 315 213)
(START START 0 0 310 10)
) (
(GOAL START E0 END0
(! (//-APPLY-TO-ALL-AFTER-ROOTS
       (LAMBDA
           $X
           (! (PRINT-FACTORIAL $X)))
       (. 4 5 6 7 .)))
()  98 -16 40 0)
) )
(|Test Fact| (
(INVOCATION INVOCATION (FOO $X $Y) 9 47 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS () 10 310 0 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP is here to demonstrate how one can call a goal
invoked OP with a fact. Note that it will only print the
result if $Y was bound to the right value... (you cannot 
conclude a fact with unbound variable)" 10 410 1 60 0 )
(PROPERTIES PROPERTIES () 10 360 0 60 0 )
) (
(START START 0 0 306 12)
(PROCESS N0 0 0 315 163)
(END END0 0 0 310 289)
) (
(GOAL N0 E1 END0
(! (PRINT $X))
()  0 0 40 0)
(GOAL START E0 N0
(! (FACTORIAL $X $Y))
()  0 0 40 0)
) )
(|Test and Set Fact| (
(INVOCATION INVOCATION (! (TAS-FACT $X $Y)) 11 52 1 80 0 )
(CONTEXT CONTEXT  10 110 0 60 0 )
(SETTING SETTING  10 210 0 60 0 )
(EFFECTS EFFECTS () 10 310 0 60 0 )
(DOCUMENTATION DOCUMENTATION "This OP is here to illustrate the TEST-AND-SET mechanism.
It will post the goal (! (factorial $x $y)) and according to
the success or the failure will print an appropriate message." 10 410 1 60 0 )
(PROPERTIES PROPERTIES () 10 360 0 60 0 )
) (
(END END0 0 0 251 340)
(END END1 0 0 450 342)
(PROCESS N2 0 0 456 214)
(PROCESS N1 0 0 257 209)
(PROCESS N0 0 0 354 113)
(START START 0 0 343 8)
) (
(GOAL START E0 N0
(! (TEST-AND-SET
       (! (FACTORIAL $X $Y)) $RES))
()  0 0 40 0)
(GOAL N0 E2 N2
(? (== NIL $RES))
()  0 0 40 0)
(GOAL N0 E1 N1
(? (== T $RES))
()  0 0 40 0)
(GOAL N1 E3 END0
(! (PRINT-LIST
       (FORMAT
           NIL
           "Factorial ~a ~a is true.~%"
           $X
           $Y)))
()  -48 -24 40 0)
(GOAL N2 E4 END1
(! (PRINT-LIST
       (FORMAT
           NIL
           "Factorial ~a ~a is false.~%"
           $X
           $Y)))
()  97 3 40 0)
) )
)
